import { mkn0, Signer, config, Pact, sleep } from './B0.mjs'
// let n0 = await mkn0({ bin: 'geth-linux-amd64-1.11.0-18b641b0', mining: true })
let n0 = await mkn0({ bin: 'geth-linux-amd64-1.10.26-e5eb32ac', mining: true })
await sleep(1000)
let s0 = new Signer(config.roots[0].secret), s1 = new Signer(process.env.GTMN_Test_secret)
let Upgradeable = new Pact({ n: n0, name: 'UPGRADEABLE', coderType: 'assemble' })
n0.signers.add(s0)
console.log(await n0.PUSH0)
console.log(await Upgradeable.estimateGas.deploy)
console.log(await Upgradeable.data.deploy)
console.log(await Upgradeable.deploy)
// let startGas = await Upgradeable.estimateGas.deploy.catch(e => { throw e })
// console.log(startGas)
// let gasPrice = await n.gasPrice.catch(e => { throw e })
// console.log(startGas, gasPrice)
// console.dir(await n.order({ to: s1.address, value: startGas * gasPrice * 110n / 100n }).catch(e => { throw e }), { depth: Infinity })
// n.signers.delete(s0)
// n.signers.add(s1)
// console.dir(await Upgradeable.deploy.catch(e => { throw e }), { depth: Infinity })
// let word = await Upgradeable.slot(0n).catch(e => { throw e })
// console.log(word)
// process.exit()