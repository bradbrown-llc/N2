import { mkn2, Signer, config, Pact, sleep } from './B0.mjs'
let n2 = await mkn2({ bin: 'geth-linux-amd64-1.11.0-18b641b0' })
// let n2 = await mkn2({ bin: 'geth-linux-amd64-1.10.26-e5eb32ac' })
await sleep(1000)
let s0 = new Signer(config.roots[0].secret), s1 = new Signer(process.env.GTMN_Test_secret)
let Upgradeable = new Pact({ n: n2, name: 'UPGRADEABLE', coderType: 'assemble' })
n2.signers.add(s0)
await n2.n1s[0].order(); await Promise.all([n2.n1s[0].order(), n2.n1s[1].order()])
console.log(await n2.PUSH0)
console.log(await Upgradeable.estimateGas.deploy)
console.log(await Upgradeable.data.deploy)
console.log(await Upgradeable.deploy([{ nonce: 2n }, { nonce: 1n }, { nonce: 0n }]))
Upgradeable.address = undefined
console.log(await Upgradeable.deploy([{ nonce: 3n }, { nonce: 1n }, { nonce: 1n }]))
console.log(Upgradeable)
// console.log(await Upgradeable.estimateGas.deploy)
// console.dir(await Upgradeable.estimateGas.deploy, { depth: Infinity })
// let gasPrice = await n.gasPrice.catch(e => { throw e })
// console.log(startGas, gasPrice)
// console.dir(await n.order({ to: s1.address, value: startGas * gasPrice * 110n / 100n }).catch(e => { throw e }), { depth: Infinity })
// n.signers.delete(s0)
// n.signers.add(s1)
// console.dir(await Upgradeable.deploy.catch(e => { throw e }), { depth: Infinity })
// let word = await Upgradeable.slot(0n).catch(e => { throw e })
// console.log(word)
// process.exit()